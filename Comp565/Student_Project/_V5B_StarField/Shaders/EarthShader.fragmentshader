/*Basic shading provided by the openGL tutorial. 
**Jared Fowler - Added a second texture so now
**the earth has both a night and day texture.
**I used a form of interpulation to switch between
**the two, in order to avoid a nasty looking line
**separation
*/

#version 330 core

// Interpolated values from the vertex shaders
in vec2 UV;
in vec3 Position_worldspace;
in vec3 Normal_cameraspace;
in vec3 EyeDirection_cameraspace;
in vec3 LightDirection_cameraspace;

// Ouput data
out vec3 color;

// Values that stay constant for the whole mesh.
uniform sampler2D myTextureSampler_0;
uniform sampler2D myTextureSampler_1;
uniform mat4 MV;
uniform vec4 LightPosition_worldspace_0;

void main(){

	// Light emission properties
	// You probably want to put them as uniforms
	vec3 LightColor = vec3(1,1,1);
	float LightPower = LightPosition_worldspace_0.w;
	
	// Material properties
	vec3 MaterialDiffuseColor;
	vec3 MaterialAmbientColor = vec3(0.1,0.1,0.1);
	vec3 MaterialSpecularColor = vec3(0.3,0.3,0.3);

	// Distance to the light
	float distance = length( LightPosition_worldspace_0.xyz - Position_worldspace );

	// Normal of the computed fragment, in camera space
	vec3 n = normalize( Normal_cameraspace );
	// Direction of the light (from the fragment to the light)
	vec3 l = normalize( LightDirection_cameraspace );
	// Cosine of the angle between the normal and the light direction, 
	// clamped above 0
	//  - light is at the vertical of the triangle -> 1
	//  - light is perpendicular to the triangle -> 0
	//  - light is behind the triangle -> 0
	float cosTheta = dot( n,l );
	
	// Eye vector (towards the camera)
	vec3 E = normalize(EyeDirection_cameraspace);
	// Direction in which the triangle reflects the light
	vec3 R = reflect(-l,n);
	// Cosine of the angle between the Eye vector and the Reflect vector,
	// clamped to 0
	//  - Looking into the reflection -> 1
	//  - Looking elsewhere -> < 1
	float cosAlpha = clamp( dot( E,R ), 0,1 );

    //Get the first color
    if(cosTheta < -.1){ //Night
        color = texture2D( myTextureSampler_1, UV ).rgb * (MaterialAmbientColor * 4.5);
    }
    else if(cosTheta > .1){ //Day
        color =  MaterialAmbientColor * texture2D( myTextureSampler_0, UV ).rgb;
		color += texture2D( myTextureSampler_0, UV ).rgb * LightColor * LightPower * cosTheta / (distance*distance);
		color += MaterialSpecularColor * LightColor * LightPower * pow(cosAlpha,5) / (distance*distance);
    }

    //To avoid a sudden shift from night-day, we will have some sort of interpulation
    else{ //Transition night to day
        //Get what texture would be like at edge
        vec3 edgeColor = MaterialAmbientColor * texture2D( myTextureSampler_0, UV ).rgb;
        edgeColor += texture2D( myTextureSampler_0, UV ).rgb * LightColor * LightPower * .1 / (distance*distance);
        edgeColor += MaterialSpecularColor * LightColor * LightPower * pow(cosAlpha,5) / (distance*distance);

        vec3 edgeColorN = texture2D( myTextureSampler_1, UV ).rgb * (MaterialAmbientColor * 4.5);
        
        //Adjust output color based upon percentage of position
        color = ((edgeColor - edgeColorN) * ((0.1 + cosTheta)/.2)) + edgeColorN;
    }

}